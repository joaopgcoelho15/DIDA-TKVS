package dadkvs.server;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;

/* these imported classes are generated by the contract */

import dadkvs.DadkvsConsole;
import dadkvs.DadkvsConsoleServiceGrpc;
import dadkvs.DadkvsServerServiceGrpc.DadkvsServerServiceStub;
import io.grpc.Server;
import io.grpc.stub.StreamObserver;
import dadkvs.DadkvsMain;
import dadkvs.DadkvsMainServiceGrpc;
import dadkvs.DadkvsServer;
import dadkvs.DadkvsServerServiceGrpc.DadkvsServerServiceStub;
import dadkvs.util.CollectorStreamObserver;
import dadkvs.util.GenericResponseCollector;

public class DadkvsConsoleServiceImpl extends DadkvsConsoleServiceGrpc.DadkvsConsoleServiceImplBase {
    
    DadkvsServerState server_state;
    DadkvsMainServiceImpl main_service;
    HashMap<Integer, dadkvs.DadkvsServerServiceGrpc.DadkvsServerServiceStub> stubs;


    public DadkvsConsoleServiceImpl(DadkvsServerState state, DadkvsMainServiceImpl main_service, HashMap<Integer, dadkvs.DadkvsServerServiceGrpc.DadkvsServerServiceStub> stubs) {
        this.server_state = state;
        this.main_service = main_service;
        this.stubs = stubs;
    }

    @Override
    public void setleader(DadkvsConsole.SetLeaderRequest request, StreamObserver<DadkvsConsole.SetLeaderReply> responseObserver) {
        // for debug purposes
        System.out.println(request);

        boolean response_value = true;
        this.server_state.i_am_leader = request.getIsleader();

        // for debug purposes
        System.out.println("I am the leader = " + this.server_state.i_am_leader);

        //If I am a leader in this configuration, I will commit all the stored values
        if(!this.server_state.onlyLearners.contains(server_state.my_id)){
            commitStoredValues();
        }

        this.server_state.main_loop.wakeup();

        DadkvsConsole.SetLeaderReply response = DadkvsConsole.SetLeaderReply.newBuilder()
                .setIsleaderack(response_value).build();

        responseObserver.onNext(response);
        responseObserver.onCompleted();
    }

    @Override
    public void setdebug(DadkvsConsole.SetDebugRequest request, StreamObserver<DadkvsConsole.SetDebugReply> responseObserver) {
        // for debug purposes
        System.out.println(request);
        int mode = request.getMode();

        switch (mode) {
            case 1 -> {
                System.exit(-1);
            }
            case 2 -> {
                System.out.println("Slow mode on");
                server_state.lock.lock();
                server_state.isFrozen = true;
            }
            case 3 -> {
                System.out.println("Slow mode off");
                server_state.lock.lock();
                try {
                    server_state.isFrozen = false;
                    server_state.freezeCondition.signalAll();
                } finally {
                    server_state.lock.unlock();
                }
            }
            case 4 -> {
                System.out.println("Enabling slow mode");
                server_state.slowMode = true;
            }
            case 5 -> {
                System.out.println("Disabling slow mode");
                server_state.slowMode = false;
            }
        }

        boolean response_value = true;

        this.server_state.debug_mode = request.getMode();
        this.server_state.main_loop.wakeup();

        // for debug purposes
        System.out.println("Setting debug mode to = " + this.server_state.debug_mode);

        DadkvsConsole.SetDebugReply response = DadkvsConsole.SetDebugReply.newBuilder()
                .setAck(response_value).build();

        responseObserver.onNext(response);
        responseObserver.onCompleted();
    }

    public void commitStoredValues(){
        boolean stop = false;
        List<DadkvsMain.CommitRequest> sortedKeys = new ArrayList<>(server_state.pendingRequests.keySet());

        for (DadkvsMain.CommitRequest key : sortedKeys) {
            int writeKey = key.getWritekey();
            if(writeKey == 0){
                stop = true;
            }
            main_service.innitPaxos(stubs, key.getReqid(), stop);
            stop = false;
        }
    }
}