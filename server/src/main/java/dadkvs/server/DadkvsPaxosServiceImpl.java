
package dadkvs.server;

/* these imported classes are generated by the contract */
import dadkvs.DadkvsMain;
import dadkvs.DadkvsServer;
import dadkvs.DadkvsServerServiceGrpc;

import dadkvs.util.GenericResponseCollector;
import dadkvs.util.CollectorStreamObserver;

import io.grpc.ManagedChannel;
import io.grpc.ManagedChannelBuilder;
import io.grpc.stub.StreamObserver;

public class DadkvsPaxosServiceImpl extends DadkvsServerServiceGrpc.DadkvsServerServiceImplBase {


    DadkvsServerState server_state;
    int leaderStamp;
    int proposedValue;


    public DadkvsPaxosServiceImpl(DadkvsServerState state) {
        this.server_state = state;
        leaderStamp = -1;
        proposedValue = -1;
    }


    @Override
    public void phaseone(DadkvsServer.PhaseOneRequest request, StreamObserver<DadkvsServer.PhaseOneReply> responseObserver) {
        // for debug purposes
        System.out.println("Receive phase1 request: " + request);

        int currentStamp = request.getPhase1Timestamp();

        //If this proposer has an ID higher then any ID I have promised
        if(currentStamp > leaderStamp){
            leaderStamp = currentStamp;
            //If a value has already been accepted previously
            if(proposedValue >= 0){
                //Send PROMISE IDp accepted IDa, value
            }
            else{
                //Send PROMISE IDp
            }
        }
        else{
            //Ignore the request
        }

    }

    @Override
    public void phasetwo(DadkvsServer.PhaseTwoRequest request, StreamObserver<DadkvsServer.PhaseTwoReply> responseObserver) {
        // for debug purposes
        System.out.println("Receive phase two request: " + request);

        int currentStamp = request.getPhase2Timestamp();

        if(currentStamp > leaderStamp){
            leaderStamp = currentStamp;
            //Reply ACCEPT IDp, value
            //Also broadcast to all learners
        }
        else{
            //Ignore the request
        }
    }

    @Override
    public void learn(DadkvsServer.LearnRequest request, StreamObserver<DadkvsServer.LearnReply> responseObserver) {
        // for debug purposes
        System.out.println("Receive learn request: " + request);

    }

}
