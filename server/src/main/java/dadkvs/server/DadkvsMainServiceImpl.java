package dadkvs.server;

/* these imported classes are generated by the contract */

import dadkvs.DadkvsMain;
import dadkvs.DadkvsMainServiceGrpc;
import dadkvs.DadkvsServer;

import dadkvs.DadkvsConsole;
import dadkvs.DadkvsConsoleServiceGrpc;
import dadkvs.DadkvsMain;
import dadkvs.DadkvsMainServiceGrpc;

import dadkvs.util.GenericResponseCollector;
import dadkvs.util.CollectorStreamObserver;

import java.util.Scanner;

import io.grpc.ManagedChannel;
import io.grpc.ManagedChannelBuilder;

import io.grpc.stub.StreamObserver;

public class DadkvsMainServiceImpl extends DadkvsMainServiceGrpc.DadkvsMainServiceImplBase {

    DadkvsServerState server_state;
    int timestamp;

    public DadkvsMainServiceImpl(DadkvsServerState state) {
        this.server_state = state;
        this.timestamp = 0;
    }

    @Override
    public void read(DadkvsMain.ReadRequest request, StreamObserver<DadkvsMain.ReadReply> responseObserver) {
        // for debug purposes
        System.out.println("Receiving read request:" + request);

        int reqid = request.getReqid();
        int key = request.getKey();
        VersionedValue vv = this.server_state.store.read(key);

        DadkvsMain.ReadReply response = DadkvsMain.ReadReply.newBuilder()
                .setReqid(reqid).setValue(vv.getValue()).setTimestamp(vv.getVersion()).build();

        responseObserver.onNext(response);
        responseObserver.onCompleted();
    }

    @Override
    public void committx(DadkvsMain.CommitRequest request, StreamObserver<DadkvsMain.CommitReply> responseObserver) {
        // for debug purposes
        System.out.println("Receiving commit request:" + request);

        int reqid = request.getReqid();

        if(server_state.i_am_leader){
            //Fazer o codigo do broadcast para os outros servers
            DadkvsServer.ReqIdBroadcast reqidBroadcast = DadkvsServer.ReqIdBroadcast.newBuilder().setReqid(reqid).build();

            for (dadkvs.DadkvsMainServiceGrpc.DadkvsMainServiceStub stub : otherServerStubs) {
                stub.sendReqidBroadcast(reqidBroadcast, new StreamObserver<Empty>(){
                    @Override
                    public void onNext(Empty value) {
                        //Handle response from other servers
                    }

                    @Override
                    public void onError(Throwable t){
                        //Handle error from other servers
                        System.out.println("Error broadcasting reqid:" + reqid);
                    }

                    @Override
                    public void onCompleted(){
                        //Handle completionfrom other servers
                    }
                }
                );
            }
        }
        else if(reqid != server_state.nextReqid) {
            server_state.addPendingRequest(request, responseObserver);
            return;
        }

        int key1 = request.getKey1();
        int version1 = request.getVersion1();
        int key2 = request.getKey2();
        int version2 = request.getVersion2();
        int writekey = request.getWritekey();
        int writeval = request.getWriteval();

        // for debug purposes
        System.out.println("reqid " + reqid + " key1 " + key1 + " v1 " + version1 + " k2 " + key2 + " v2 " + version2 + " wk " + writekey + " writeval " + writeval);

        this.timestamp++;
        TransactionRecord txrecord = new TransactionRecord(key1, version1, key2, version2, writekey, writeval, this.timestamp);
        boolean result = this.server_state.store.commit(txrecord);

        if(result){
            // for debug purposes
            System.out.println("Result is ready for request with reqid " + reqid);

            DadkvsMain.CommitReply response = DadkvsMain.CommitReply.newBuilder()
                    .setReqid(reqid).setAck(result).build();

            responseObserver.onNext(response);
            responseObserver.onCompleted();
        }
        else{
            
        }
    }
}
